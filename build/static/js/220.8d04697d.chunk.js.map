{"version":3,"sources":["views/apps/freshlist/accounts/CreateLead.js","AxiosnewConfig.js"],"names":["selectItem1","CreateLead","useState","setViewpermisson","setEditpermisson","setCreatepermisson","setDeletepermisson","firstname","setFirstname","Paymentmode","setPaymentmode","Paymentdetails","setPaymentdetails","StateList","setStateList","CityList","setCityList","SelectedState","setSelectedState","Mobile_no","setMobile_no","password","setpassword","email","setemail","setstatus","setAssignRole","Postalcode","setPostalCode","UserName","setUserName","setproductName","Lastname","setLastname","navigate","useHistory","useEffect","pageparmission","JSON","parse","localStorage","getItem","newparmisson","role","find","value","pageName","permission","includes","formdata","FormData","append","Userinfo","id","axiosConfig","post","then","res","console","log","data","roles","catch","err","get","response","states","error","className","render","history","color","onClick","goBack","onSubmit","e","preventDefault","axiosConfig1","status","swal","success","lg","md","sm","required","type","placeholder","name","onChange","target","maxLength","onKeyDown","key","size","min","numericValue","replace","for","cities","map","ele","i","state_title","selectionLimit","options","onSelect","selectedList","selectedItem","length","push","onRemove","removedItem","displayValue","newValue","Ripple","instance","axios","create","baseURL"],"mappings":"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","file":"static/js/220.8d04697d.chunk.js","sourcesContent":["// import React, { Component, useDebugValue } from \"react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport HtmlParser from \"react-html-parser\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\n\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport axiosConfig1 from \"../../../../AxiosnewConfig\";\r\n\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { timers } from \"jquery\";\r\nlet selectItem1 = [];\r\n\r\nconst CreateLead = () => {\r\n  const [Viewpermisson, setViewpermisson] = useState(null);\r\n  const [Editpermisson, setEditpermisson] = useState(null);\r\n  const [Createpermisson, setCreatepermisson] = useState(null);\r\n  const [Deletepermisson, setDeletepermisson] = useState(null);\r\n  const [firstname, setFirstname] = useState(\"\");\r\n  const [Paymentmode, setPaymentmode] = useState(\"\");\r\n  const [Paymentdetails, setPaymentdetails] = useState(\"\");\r\n  const [StateList, setStateList] = useState([]);\r\n  const [CityList, setCityList] = useState([]);\r\n  const [SelectedState, setSelectedState] = useState(\"\");\r\n\r\n  const [S_City, setS_City] = useState(\"\");\r\n  const [Mobile_no, setMobile_no] = useState(\"\");\r\n\r\n  const [discountPercentage, setDiscountPercentage] = useState(0);\r\n\r\n  const [multiSelect, setmultiSelect] = useState([]);\r\n  const [selectedOptions, setselectedOptions] = useState([]);\r\n  const [password, setpassword] = useState(\"\");\r\n  const [email, setemail] = useState(\"\");\r\n  const [status, setstatus] = useState(\"\");\r\n  const [AssignRole, setAssignRole] = useState(\"\");\r\n  const [Postalcode, setPostalCode] = useState(\"\");\r\n  const [UserName, setUserName] = useState(\"\");\r\n  const [productName, setproductName] = useState([]);\r\n  const [City, setCity] = useState(\"\");\r\n  const [Lastname, setLastname] = useState(\"\");\r\n  const navigate = useHistory();\r\n\r\n  useEffect(() => {\r\n    let pageparmission = JSON.parse(localStorage.getItem(\"userData\"));\r\n    let newparmisson = pageparmission?.role?.find(\r\n      (value) => value?.pageName === \"Create Account\"\r\n    );\r\n    setViewpermisson(newparmisson?.permission.includes(\"View\"));\r\n    setCreatepermisson(newparmisson?.permission.includes(\"Create\"));\r\n    setEditpermisson(newparmisson?.permission.includes(\"Edit\"));\r\n    setDeletepermisson(newparmisson?.permission.includes(\"Delete\"));\r\n    let formdata = new FormData();\r\n    formdata.append(\"user_id\", pageparmission?.Userinfo.id);\r\n    formdata.append(\"role\", pageparmission?.Userinfo.role);\r\n    axiosConfig\r\n      .post(\"/getrolelistdropdown\", formdata)\r\n      // .get(\"/getroleNamelist\")\r\n      .then((res) => {\r\n        console.log(res?.data.data);\r\n        setproductName(res?.data.data?.roles);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    axiosConfig\r\n      .get(\"/getallstates\")\r\n      .then((response) => {\r\n        setStateList(response.data?.states);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response.data);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    let pageparmission = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n    const formdata = new FormData();\r\n    formdata.append(\"user_id\", pageparmission?.Userinfo?.id);\r\n    formdata.append(\"role\", pageparmission?.Userinfo?.role);\r\n    formdata.append(\"firstname\", firstname);\r\n    formdata.append(\"lastname\", Lastname);\r\n    formdata.append(\"username\", UserName);\r\n    formdata.append(\"password\", password);\r\n    formdata.append(\"phone\", Mobile_no);\r\n    formdata.append(\"state_id\", SelectedState);\r\n    formdata.append(\"city_id\", selectItem1[0]);\r\n    formdata.append(\"email\", email);\r\n    formdata.append(\"postal_code\", Postalcode);\r\n    formdata.append(\"payment_mode\", Paymentmode);\r\n    formdata.append(\"payment_detail\", Paymentdetails);\r\n\r\n    axiosConfig1\r\n      .post(\"/addcrmlead\", formdata)\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (!response?.data.status) {\r\n          swal(\r\n            \"error\",\r\n            `The Username and Email field must contain a unique value`\r\n          );\r\n        }\r\n        if (response.data?.success) {\r\n          // this.props.history.push(\"/app/freshlist/house/userlist\");\r\n\r\n          navigate.goBack();\r\n\r\n          swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n          setAssignRole(\"\");\r\n          // setstatus(\"\");\r\n          setFirstname(\"\");\r\n          setLastname(\"\");\r\n          setemail(\"\");\r\n          // setCity(\"\");\r\n          setMobile_no(\"\");\r\n          setstatus(\"\");\r\n          setUserName(\"\");\r\n          setPostalCode(\"\");\r\n          setSelectedState(\"\");\r\n\r\n          setpassword(\"\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        // console.log(error.response);\r\n        // let arr = error.response?.data?.data;\r\n        // if (arr.length > 0) {\r\n        //   let Existing = error.response?.data?.data?.map((ele) => ele);\r\n        //   if (Existing !== undefined) {\r\n        //     let allExisting = Existing?.flat();\r\n        //     swal(\r\n        //       \"Error\",\r\n        //       `${allExisting} Existing in DataBase Choose Different `\r\n        //     );\r\n        //   }\r\n        // }\r\n      });\r\n  };\r\n\r\n  const onSelect = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    selectItem1 = [];\r\n    if (selectedList.length) {\r\n      for (var i = 0; i < selectedList.length; i++) {\r\n        selectItem1.push(selectedList[i].id);\r\n      }\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    if (selectedList.length) {\r\n      for (var i = 0; i < selectedList.length; i++) {\r\n        selectedOptions.push(selectedList[i].id);\r\n      }\r\n    }\r\n\r\n    let arr = selectedList.map((ele) => ele.id);\r\n    setmultiSelect(arr);\r\n    // console.log(multiSelect);\r\n\r\n    let uniqueChars = [...new Set(selectedOptions)];\r\n\r\n    if (uniqueChars.length === 1) {\r\n      let value = uniqueChars[0];\r\n      const formdata = new FormData();\r\n      formdata.append(\"state_id\", value);\r\n      axiosConfig\r\n        .post(`/getcity`, formdata)\r\n        .then((res) => {\r\n          setCityList(res?.data?.cities);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      setCityList([]);\r\n    }\r\n  };\r\n  const onRemove1 = (selectedList, removedItem) => {\r\n    // debugger;\r\n    // setselectedOptions(\"\");\r\n    // console.log(selectedList);\r\n    // setmultiSelect(selectedList);\r\n\r\n    let arr = selectedList.map((ele) => ele.id);\r\n    // console.log(arr);\r\n    setmultiSelect(arr);\r\n    // console.log(multiSelect);\r\n    // if (selectedList.length) {\r\n    //   for (var i = 0; i < selectedList.length; i++) {\r\n    //     selectedOptions.push(selectedList[i].id);\r\n    //   }\r\n    // }\r\n    // let uniqueChars = [...new Set(selectedOptions)];\r\n    // console.log(uniqueChars);\r\n  };\r\n\r\n  const onRemove = (selectedList, removedItem) => {\r\n    console.log(selectedList);\r\n    console.log(removedItem);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Add Lead</h1>\r\n            </Col>\r\n            <Col>\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\"float-right mt-2\"\r\n                    color=\"warning\"\r\n                    onClick={() => history.goBack()}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"container \"></div>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                {/* <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label> Select Role*</Label>\r\n                    <CustomInput\r\n                      required\r\n                      id=\"AssignRole\"\r\n                      type=\"select\"\r\n                      name=\"AssignRole\"\r\n                      value={AssignRole}\r\n                      // onChange={changeHandler}\r\n                      onChange={(e) => setAssignRole(e.target.value)}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n\r\n                      {productName &&\r\n                        productName?.map((value, index) => (\r\n                          <option key={index} value={value?.id}>\r\n                            {value?.role}\r\n                          </option>\r\n                        ))}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col> */}\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>First Name *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Your Name\"\r\n                      name=\"firstname\"\r\n                      value={firstname}\r\n                      onChange={(e) => setFirstname(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Last Name *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Your Name\"\r\n                      name=\"lastname\"\r\n                      value={Lastname}\r\n                      onChange={(e) => setLastname(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>UserName *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Your Name\"\r\n                      name=\"UserName\"\r\n                      value={UserName}\r\n                      onChange={(e) => setUserName(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>Mobile Number *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      maxLength={12}\r\n                      onKeyDown={(e) =>\r\n                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                        e.preventDefault()\r\n                      }\r\n                      size={10}\r\n                      min={0}\r\n                      placeholder=\"+910000000000\"\r\n                      name=\"Mobile_no\"\r\n                      value={Mobile_no}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        // Use regular expression to allow only numbers\r\n                        const numericValue = value.replace(/\\D/g, \"\");\r\n\r\n                        setMobile_no(numericValue);\r\n                      }}\r\n                      // onChange={(e) => setMobile_no(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>Email *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"email\"\r\n                      placeholder=\"abcd@gmail.com...\"\r\n                      name=\"email\"\r\n                      value={email}\r\n                      onChange={(e) => setemail(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>Password *</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"password\"\r\n                      placeholder=\"Enter password\"\r\n                      name=\"password\"\r\n                      value={password}\r\n                      onChange={(e) => setpassword(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label for=\"cars\"> State *</Label>\r\n                    {/* {AssignRole === \"supplier\" ? (\r\n                      <>\r\n                        <Multiselect\r\n                          required\r\n                          showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={StateList} // Options to display in the dropdown\r\n                          // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                          onSelect={onSelect1} // Function will trigger on select event\r\n                          onRemove={onRemove1} // Function will trigger on remove event\r\n                          displayValue=\"state_title\" // Property name to display in the dropdown options\r\n                        />\r\n                      </>\r\n                    ) : ( */}\r\n                    <>\r\n                      <select\r\n                        required\r\n                        name=\"SelectedState\"\r\n                        value={SelectedState}\r\n                        onChange={(e) => {\r\n                          const formdata = new FormData();\r\n                          setSelectedState(e.target.value);\r\n                          formdata.append(\"state_id\", e.target.value);\r\n                          axiosConfig\r\n                            .post(`/getcity`, formdata)\r\n                            .then((res) => {\r\n                              setCityList(res?.data?.cities);\r\n                            })\r\n                            .catch((err) => {\r\n                              console.log(err);\r\n                            });\r\n                        }}\r\n                        // onChange={this.changeHandler}\r\n                        className=\"form-control\"\r\n                      >\r\n                        <option value=\"volvo\">--Select State--</option>\r\n                        {StateList &&\r\n                          StateList?.map((ele, i) => (\r\n                            <option key={i} value={ele?.id}>\r\n                              {ele?.state_title}\r\n                            </option>\r\n                          ))}\r\n                      </select>\r\n                    </>\r\n                    {/* )} */}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <Label>City*</Label>\r\n                  <Multiselect\r\n                    required\r\n                    // singleSelect\r\n                    selectionLimit={1}\r\n                    options={CityList} // Options to display in the dropdown\r\n                    // selectedValues={selectedValue} // Preselected value to persist in dropdown\r\n                    onSelect={onSelect} // Function will trigger on select event\r\n                    onRemove={onRemove} // Function will trigger on remove event\r\n                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                  />\r\n                </Col>\r\n\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>Postal Code</Label>\r\n                    <textarea\r\n                      required\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Enter Postal code\"\r\n                      name=\"postalcode\"\r\n                      value={Postalcode}\r\n                      onChange={(e) => {\r\n                        // const value = e.target.value;\r\n                        var currentValue = e.target.value;\r\n\r\n                        // Remove spaces from the current value\r\n                        // var newValue = currentValue.replace(/\\s/g, \"\");\r\n                        const newValue = currentValue.replace(/[^\\d,]/g, \"\");\r\n                        setPostalCode(newValue);\r\n                      }}\r\n                      // onChange={(e) => setPostalCode(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label> Payment Mode*</Label>\r\n                    <CustomInput\r\n                      required\r\n                      id=\"Paymentmode\"\r\n                      type=\"select\"\r\n                      name=\"Paymentmode\"\r\n                      value={Paymentmode}\r\n                      // onChange={changeHandler}\r\n                      onChange={(e) => setPaymentmode(e.target.value)}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n\r\n                      <option value=\"Cash\">Cash</option>\r\n                      <option value=\"Cheque\">Cheque</option>\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>Details</Label>\r\n                    <textarea\r\n                      className=\"form-control\"\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Details\"\r\n                      name=\"Paymentdetails\"\r\n                      value={Paymentdetails}\r\n                      onChange={(e) => setPaymentdetails(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <hr />\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateLead;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://website.mmbaic.com/api/ApiCommonController1/\",\r\n});\r\n\r\nexport default instance;\r\n"],"sourceRoot":""}